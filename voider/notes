
As s ranges from 1 to 255 for a server and i ranges from 1 to 255 aswell every user has up to 500 connections. Now because of the birthday's paradox :

The range implies 13 * ( 2 ^ 16 ) addresses .
13 because 13 = (28 - 16) + 1 .
so 13 * ( 2 ^ 16 ) = 851968 addresses .
Because we are dealing with /30 we divide by 2 
having 425984 usable addresses one for the phone and one for the gateway.
Now as we are dealing with sets just as with days we divide by 2 again.
having 212992 networks. Now if instead of 365 days we would have 212992 days, then if there are 544 phones in the system that choose their ip address randomly then it is likely that there will be two that will have the same ip address.

This could be addressed in two ways adopting ipv6 in a future version having the tradeoff that an user might need to call numbers such as fd68:cafe:beef:dead:feeb:feed:deaf:face wich could become a burden. Or every user asks it's 500 connected servers and clients : does someone have the same ip for the phone? And if yes then that gets resolved . Notice how when a user is connected to 255 servers and has 255 clients every one of them can use the same ip address on the phone. Because it is not transitive, there is no client to client connection, this should be fine.

If wireshark is not lying and the dlp is not broken for the elliptic curves used by openvpn and if your linux os has no backdoor circumventing wireshark. Then you can use voip in openvpn using up to 512 bits of security.
No need to use anything else to do international phonecalls.
It works fine and feels great. No third parties besides the vps that is helping with the holepunch.
This project is also great for someone that wishes to learn how to code since it contains all the basics, without pointers...

In the unlikely case that you are reading this, and in the even more unlikely case that you are baffled in amazement.
you can use my cloud if you want and are willing to pay .

1) gpg --full-generate-key

in here, give your user name, or "uid". Let's say it's bob.

2) gpg --export --armor --output newuser bob

3) connect to my cloud over sftp.

sftp newuser@192.236.162.238
pass : q2YtGlaKjd3wJ

4) get address

4)Ö)
   bc1qgpschlf2hrv2pgthdq52ksurnwaqzn7kk9pupv
   is just an example address, that you would find in the text file called address.
   You then take that address and put it in the 2nd line of the newuser file.

5) edit the newuser file, which contains your public key.
   as such :
 
   bob<br/>
   bc1qgpschlf2hrv2pgthdq52ksurnwaqzn7kk9pupv<br/>
   yourpublickey

5)Ö)
   This means, the text file "newuser" . Shall be edited as follows :
   
   bob (Line 1 of text file) <br/>
   bc1qgpschlf2hrv2pgthdq52ksurnwaqzn7kk9pupv (Line 2 of text file) <br/>
   yourpublickey (starting from line 3 until the end of text file)

6) put newuser

7) transact 0.0012 btc to the given address. You have 3 hours to have it confirmed.

8) After confirmation, a file with that address name will be @ newuser@192.236.162.238

9) get bc1qgpschlf2hrv2pgthdq52ksurnwaqzn7kk9pupv

10) gpg --output creds --decrypt bc1qgpschlf2hrv2pgthdq52ksurnwaqzn7kk9pupv

11) now your credentials are with you, you can type them in when using 

sudo -E python3 main.py

Your credentials will be deleted after 4 hours.
only one payment can be processed every 3 hours. 
Does that mean that you can write a script that will use paramiko to spoof it, so it does not work?
Yes, you can. 



