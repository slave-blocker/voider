#! /bin/bash

iptables -t nat --flush

ip netns add replay
brctl addbr breplay
ip addr add 172.18.0.1/30 dev breplay
ip link set dev breplay up
ip link add vethreplay type veth peer name veth-breplay
ip link set vethreplay netns replay
brctl addif breplay veth-breplay
ip link set dev veth-breplay up

ip netns exec replay iptables -w -t nat --flush
ip netns exec replay iptables -t filter --flush
ip netns exec replay ip addr add 172.18.0.2/30 dev vethreplay
ip netns exec replay ip link set dev lo up
ip netns exec replay ip link set dev vethreplay up

#########################

brctl addbr brsip
ip addr add 172.19.0.1/30 dev brsip
ip link set dev brsip up
ip link add vethsip type veth peer name veth-brsip
ip link set vethsip netns replay
brctl addif brsip veth-brsip
ip link set dev veth-brsip up

ip netns exec replay ip addr add 172.19.0.2/30 dev vethsip
ip netns exec replay ip link set dev vethsip up

#########################

ip netns exec replay ip route add default via 172.18.0.1
iptables -w 2 -t nat -A POSTROUTING -o brsip -s 172.16.19.85 -j SNAT --to-source 172.18.0.2

# into the tunnel :
iptables -w 2 -t nat -A POSTROUTING -o wg0 -s 172.16.19.85 -p udp ! --dport 5060 -j SNAT --to-source 172.29.1.1
iptables -w 2 -t nat -A POSTROUTING -o wg0 -s 172.18.0.2 -p udp --dport 5060 -j SNAT --to-source 172.29.1.1

# out of the tunnel :
iptables -w 2 -t nat -A PREROUTING -i wg0 -d 172.29.1.1 -p udp ! --dport 5060 -j DNAT --to-destination 172.16.19.85
iptables -w 2 -t nat -A PREROUTING -i wg0 -d 172.29.1.1 -p udp --dport 5060 -j DNAT --to-destination 172.18.0.2


sleep 2s

mkdir /ram-dir

mount ramfs -t ramfs /ram-dir

cp /home/$(hostname)/.config/voider/scaps.py /ram-dir/

cp /home/$(hostname)/.config/voider/clients/mapping_clients /ram-dir/
cp /home/$(hostname)/.config/voider/servers/mapping_servers /ram-dir/

cd /ram-dir

a=$(cat /home/$(hostname)/.config/voider/self/int_in)
d=$(cat /sys/class/net/$a/address)

while true
    do

    sleep 2s
    ping -c 1 "172.16.19.85"
    sleep 2s
    c=$(arp -a 172.16.19.85 | awk '{print $4}')

    if echo $c | grep -E -q "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$"; 
        then
        echo "Valid MAC address"
        break
    fi
done

sed -i "s/ยง1/$d/g" "scaps.py"
sed -i "s/ยง2/$c/g" "scaps.py"
sed -i "s/ยง3/$a/g" "scaps.py"

touch go

touch go2

sleep 2s

ip netns exec replay /home/$(hostname)/.config/voider/rp_filter_off

