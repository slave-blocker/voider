#!/bin/bash

#all of this can be setup without needing to worry if the tunnel is up or not :)

ip netns add netns$1
brctl addbr br$1
ip addr add 172.30.$1.1/24 dev br$1
ip link set dev br$1 up
ip link add veth$1 type veth peer name veth-br$1
ip link set veth$1 netns netns$1
brctl addif br$1 veth-br$1
ip link set dev veth-br$1 up

#""""""""""""""""""""""""""""""""""""""""""""""

ip netns exec netns$1 iptables -w 2 -t nat --flush
ip netns exec netns$1 iptables -w 2 -t filter --flush
ip netns exec netns$1 ip addr add 172.30.$1.2/24 dev veth$1
ip netns exec netns$1 ip link set dev lo up
ip netns exec netns$1 ip link set dev veth$1 up
ip netns exec netns$1 ip route add default via 172.30.$1.1 dev veth$1
ip netns exec netns$1 iptables -w 2 -A OUTPUT -o veth$1 -d 172.31.0.1 -j DROP

name_cert=$(ls /home/$(hostname)/.config/voider/servers/servers/$1/cert/)
client_name=$(echo $name_cert | sed 's/\..*//')
int_ip=$(cat /home/$(hostname)/.config/voider/self/localip)

to_phone=$(cat /home/$(hostname)/.config/voider/self/int_in)

#first setup the routes :
ip netns exec netns$1 ip route add 172.18.0.2 via 172.30.$1.1
ip netns exec netns$1 ip route add 172.16.19.85 via 172.30.$1.1

#$1 -> is the index we call the server
#our client has an index aswell, wich is given in the wireguard cert, @ interface address

ip route add 10.$1.1.1 via 172.30.$1.2
ip netns exec netns$1 iptables -w 2 -t nat -A POSTROUTING -o veth$1 -p udp -s 172.29.1.1 -d 172.16.19.85 -j SNAT --to-source 10.$1.1.1
ip netns exec netns$1 iptables -w 2 -t nat -A POSTROUTING -o veth$1 -p udp -s 172.29.1.1 -d 172.18.0.2 -j SNAT --to-source 10.$1.1.1
#into the tunnel :
ip netns exec netns$1 iptables -w 2 -t nat -A PREROUTING -i veth$1 -p udp -d 10.$1.1.1 -j DNAT --to-destination 172.29.1.1

#nat into the bridge to fool conntrack :
# 6000 + server's client idx
portroute=$((6000 + $1))

iptables -w 2 -t nat -A PREROUTING -i $to_phone -p udp --dport 5060 -s 172.16.19.85 -d 10.$1.1.1 -j DNAT --to 172.19.0.2:$portroute -m comment --comment "Normal sip"

iptables -w 2 -t nat -A POSTROUTING -o brsip -s 172.16.19.85 -j SNAT --to-source 172.18.0.2

ip netns exec replay iptables -w 2 -t nat -A PREROUTING -i vethsip -p udp --dport $portroute -s 172.18.0.2 -d 172.19.0.2 -j DNAT --to 10.$1.1.1:5060 -m comment --comment "fooled conntrack :)"


mapping=$(sed "$1 q;d" /home/$(hostname)/.config/voider/servers/mapping_servers)
#GXP 1610 PATCH : only incoming calls from "the same ip's", that have the same character length per octet as 172.16.19.85 are recognized by the phone.

#Ack gets routed just like rtp:
iptables -w 2 -t nat -A PREROUTING -i $to_phone -p udp --dport 5060 -s 172.16.19.85 -d $mapping -j DNAT --to 172.19.0.2:$portroute -m comment --comment "Normal sip"
#rtp:
iptables -w 2 -t nat -A PREROUTING -i $to_phone -p udp ! --dport 5060 -s 172.16.19.85 -d $mapping -j DNAT --to 10.$1.1.1 -m comment --comment "rtp"

ip netns exec netns$1 /home/$(hostname)/.config/voider/rp_filter_off

